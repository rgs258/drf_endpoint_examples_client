# coding: utf-8

"""
    DRF Endpoint Examples

    Swagger API Documentation for DRF Endpoint Examples.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Review(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'customer': 'str',
        'product': 'str',
        'rating': 'int',
        'review': 'str'
    }

    attribute_map = {
        'customer': 'customer',
        'product': 'product',
        'rating': 'rating',
        'review': 'review'
    }

    def __init__(self, customer=None, product=None, rating=None, review=None):  # noqa: E501
        """Review - a model defined in Swagger"""  # noqa: E501
        self._customer = None
        self._product = None
        self._rating = None
        self._review = None
        self.discriminator = None
        self.customer = customer
        self.product = product
        self.rating = rating
        self.review = review

    @property
    def customer(self):
        """Gets the customer of this Review.  # noqa: E501


        :return: The customer of this Review.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Review.


        :param customer: The customer of this Review.  # noqa: E501
        :type: str
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def product(self):
        """Gets the product of this Review.  # noqa: E501


        :return: The product of this Review.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Review.


        :param product: The product of this Review.  # noqa: E501
        :type: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501

        self._product = product

    @property
    def rating(self):
        """Gets the rating of this Review.  # noqa: E501


        :return: The rating of this Review.  # noqa: E501
        :rtype: int
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this Review.


        :param rating: The rating of this Review.  # noqa: E501
        :type: int
        """
        if rating is None:
            raise ValueError("Invalid value for `rating`, must not be `None`")  # noqa: E501

        self._rating = rating

    @property
    def review(self):
        """Gets the review of this Review.  # noqa: E501


        :return: The review of this Review.  # noqa: E501
        :rtype: str
        """
        return self._review

    @review.setter
    def review(self, review):
        """Sets the review of this Review.


        :param review: The review of this Review.  # noqa: E501
        :type: str
        """
        if review is None:
            raise ValueError("Invalid value for `review`, must not be `None`")  # noqa: E501

        self._review = review

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Review, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Review):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
